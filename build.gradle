import groovy.xml.MarkupBuilder
import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java'
}

def MAIN_CLASS = 'fr.ostix.game.main.Main'
group 'fr.ostix.game'
version '0.6.0'

switch (OperatingSystem.current()) {
	case OperatingSystem.LINUX:
		project.ext.lwjglNatives = "natives-linux"
		break
	case OperatingSystem.WINDOWS:
		project.ext.lwjglNatives = "natives-windows"
		break
}

repositories {
    mavenCentral()
}
tasks.register('runConfiguration') {
    //Run
    def run = new File("run")
    if (!run.exists()) run.mkdirs()

    String dir = projectDir.getAbsolutePath()
    println(dir)


    //Config
    def runConfigurationsDir = new File(dir + "/.idea/runConfigurations")
    runConfigurationsDir.mkdirs()
    def taskName = 'Main'
    def mainClass = MAIN_CLASS
    def props = '-Djava.library.path=../natives -Dgame.logging.console.level=log -Dorg.lwjglx.VALIDATE'
    def args = ''

    def writer = new FileWriter(new File(runConfigurationsDir, "${taskName}.xml"))
    def xml = new MarkupBuilder(writer)
    xml.component(name: "ProjectRunConfigurationManager") {
        configuration(default: 'false', name: taskName, type: "Application", factoryName: "Application", singleton: "true") {
            option(name: 'MAIN_CLASS_NAME', value: mainClass)
            option(name: 'VM_PARAMETERS', value: props)
            option(name: 'PROGRAM_PARAMETERS', value: args)
            option(name: 'WORKING_DIRECTORY', value: '$PROJECT_DIR$/run')
            module(name: '$PROJECT_NAME$.main')
        }
    }

}

project.ext.lwjglVersion = "3.3.1"
project.ext.jomlVersion = "1.10.5"


dependencies {
    implementation fileTree('libs')

    // https://mvnrepository.com/artifact/com.github.stephengold/jbullet
    implementation group: 'com.github.stephengold', name: 'jbullet', version: '1.0.2'

    // https://mvnrepository.com/artifact/cz.advel.jbullet/jbullet
//    implementation group: 'cz.advel.jbullet', name: 'jbullet', version: '20101010-1'



    // https://mvnrepository.com/artifact/javax.vecmath/vecmath
    implementation group: 'javax.vecmath', name: 'vecmath', version: '1.5.2'

    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-jemalloc"
    implementation "org.lwjgl:lwjgl-lmdb"
    implementation "org.lwjgl:lwjgl-meshoptimizer"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opencl"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"
    implementation "org.lwjgl:lwjgl-tinyfd"
    implementation "org.lwjgl:lwjgl-tootle"
    implementation "org.lwjgl:lwjgl-xxhash"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-jemalloc::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-lmdb::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-meshoptimizer::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-tinyfd::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-tootle::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-xxhash::$lwjglNatives"
    implementation "org.joml:joml:${jomlVersion}"

    // https://mvnrepository.com/artifact/org.l33tlabs.twl/pngdecoder
    implementation group: 'org.l33tlabs.twl', name: 'pngdecoder', version: '1.0'

    // https://mvnrepository.com/artifact/net.sf.trove4j/trove4j
    implementation group: 'net.sf.trove4j', name: 'trove4j', version: '3.0.3'

    // https://mvnrepository.com/artifact/org.yaml/snakeyaml
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.28'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.7'

    // https://mvnrepository.com/artifact/org.joml/joml
    implementation group: 'org.joml', name: 'joml', version: '1.10.4'


    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}



task uberJar(type: Jar) {
    archiveClassifier = 'uber'

    from sourceSets.main.output

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }}
test {
    useJUnitPlatform()
}